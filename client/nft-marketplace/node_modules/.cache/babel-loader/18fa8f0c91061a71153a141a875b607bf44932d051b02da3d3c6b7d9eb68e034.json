{"ast":null,"code":"var _jsxFileName = \"/Users/mohittrivedi/Study/Project/NFTMarketPlace-main/client/nft-marketplace/src/components/Marketplace.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport abi from \"../contracts/NFTMarketplace.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractABI = abi.abi;\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nexport default function Marketplace() {\n  _s();\n  const sampleData = [{\n    name: \"NFT#1\",\n    description: \"First NFT\",\n    website: \" \",\n    image: \"https://gateway.pinata.cloud/ipfs/QmQPGHyYLtc4NgkrTa4UVFRmLZa56Fs49dp543f3GYdLRg\",\n    price: \"0.03ETH\",\n    currentlySelling: \"False\",\n    address: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n  }, {\n    name: \"NFT#2\",\n    description: \"Second NFT\",\n    website: \" \",\n    image: \"https://gateway.pinata.cloud/ipfs/QmUmCunKexvwEkD3MXSyrqR7VuM1uQ6e1Bx7pieCoZL6ix\",\n    price: \"0.03ETH\",\n    currentlySelling: \"False\",\n    address: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n  }, {\n    name: \"NFT#3\",\n    description: \"Third NFT\",\n    website: \" \",\n    image: \"https://gateway.pinata.cloud/ipfs/bafybeicezecauoav6xticxymtrrbhiy6me4srpmzb3j3lrenj7ik4eedka\",\n    price: \"0.03ETH\",\n    currentlySelling: \"False\",\n    address: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n  }];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(contractAddress, contractABI, signer);\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs();\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n      var tokenURI = await contract.tokenURI(i.tokenId);\n      console.log(\"getting this tokenUri\", tokenURI);\n      tokenURI = GetIpfsUrlFromPinata(tokenURI);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Listed NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Marketplace, \"eoOZIC3fpxTnVeH+5XYnEv0RFm0=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","axios","useState","GetIpfsUrlFromPinata","abi","jsxDEV","_jsxDEV","contractABI","contractAddress","Marketplace","_s","sampleData","name","description","website","image","price","currentlySelling","address","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","transaction","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","get","utils","formatUnits","toString","item","toNumber","seller","owner","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","index","_c","$RefreshReg$"],"sources":["/Users/mohittrivedi/Study/Project/NFTMarketPlace-main/client/nft-marketplace/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport abi from \"../contracts/NFTMarketplace.json\";\n\nconst contractABI = abi.abi;\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nexport default function Marketplace() {\n  const sampleData = [\n    {\n      name: \"NFT#1\",\n      description: \"First NFT\",\n      website: \" \",\n      image:\n        \"https://gateway.pinata.cloud/ipfs/QmQPGHyYLtc4NgkrTa4UVFRmLZa56Fs49dp543f3GYdLRg\",\n      price: \"0.03ETH\",\n      currentlySelling: \"False\",\n      address: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n    },\n    {\n      name: \"NFT#2\",\n      description: \"Second NFT\",\n      website: \" \",\n      image:\n        \"https://gateway.pinata.cloud/ipfs/QmUmCunKexvwEkD3MXSyrqR7VuM1uQ6e1Bx7pieCoZL6ix\",\n      price: \"0.03ETH\",\n      currentlySelling: \"False\",\n      address: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n    },\n    {\n      name: \"NFT#3\",\n      description: \"Third NFT\",\n      website: \" \",\n      image:\n        \"https://gateway.pinata.cloud/ipfs/bafybeicezecauoav6xticxymtrrbhiy6me4srpmzb3j3lrenj7ik4eedka\",\n      price: \"0.03ETH\",\n      currentlySelling: \"False\",\n      address: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n    },\n  ];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(contractAddress, contractABI, signer);\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs();\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(\n      transaction.map(async (i) => {\n        var tokenURI = await contract.tokenURI(i.tokenId);\n        console.log(\"getting this tokenUri\", tokenURI);\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n        let item = {\n          price,\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        return item;\n      })\n    );\n\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <div className=\"flex flex-col place-items-center mt-20\">\n        <div className=\"md:text-xl font-bold text-white\">Listed NFTs</div>\n        <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n          {data.map((value, index) => {\n            return <NFTTile data={value} key={index}></NFTTile>;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}