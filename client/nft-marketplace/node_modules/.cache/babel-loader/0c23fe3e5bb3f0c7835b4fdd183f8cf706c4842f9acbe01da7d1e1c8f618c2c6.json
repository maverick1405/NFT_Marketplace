{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChainstackProvider = void 0;\n/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nfunction getApiKey(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"39f1d67cedf8b7831010a665328c9197\";\n    case \"arbitrum\":\n      return \"0550c209db33c3abf4cc927e1e18cea1\";\n    case \"bnb\":\n      return \"98b5a77e531614387366f6fc5da097f8\";\n    case \"matic\":\n      return \"cd9d4d70377471aa7c142ec4a4205249\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethereum-mainnet.core.chainstack.com\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.core.chainstack.com\";\n    case \"bnb\":\n      return \"bsc-mainnet.core.chainstack.com\";\n    case \"matic\":\n      return \"polygon-mainnet.core.chainstack.com\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nclass ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  The API key for the Chainstack connection.\n   */\n  apiKey;\n  /**\n   *  Creates a new **ChainstackProvider**.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = ChainstackProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    (0, index_js_1.defineProperties)(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new ChainstackProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.apiKey === getApiKey(this._network.name);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%apiKey%% and %%projectSecret%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = getApiKey(network.name);\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === getApiKey(network.name)) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"ChainstackProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.ChainstackProvider = ChainstackProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","getApiKey","name","assertArgument","getHost","ChainstackProvider","JsonRpcProvider","apiKey","constructor","_network","network","Network","from","request","getRequest","staticNetwork","defineProperties","_getProvider","chainId","error","isCommunityResource","FetchRequest","allowGzip","retryFunc","response","attempt","showThrottleMessage","exports"],"sources":["/Users/mohittrivedi/Study/Project/NFTMarketPlace-main/node_modules/ethers/src.ts/providers/provider-chainstack.ts"],"sourcesContent":["/**\n *  [[link-chainstack]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Arbitrum (``arbitrum``)\n *  - BNB Smart Chain Mainnet (``bnb``)\n *  - Polygon (``matic``)\n *\n *  @_subsection: api/providers/thirdparty:Chainstack  [providers-chainstack]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nfunction getApiKey(name: string): string {\n    switch (name) {\n        case \"mainnet\": return \"39f1d67cedf8b7831010a665328c9197\";\n        case \"arbitrum\": return \"0550c209db33c3abf4cc927e1e18cea1\"\n        case \"bnb\": return \"98b5a77e531614387366f6fc5da097f8\";\n        case \"matic\": return \"cd9d4d70377471aa7c142ec4a4205249\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethereum-mainnet.core.chainstack.com\";\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.core.chainstack.com\";\n        case \"bnb\":\n            return \"bsc-mainnet.core.chainstack.com\";\n        case \"matic\":\n            return \"polygon-mainnet.core.chainstack.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **ChainstackProvider** connects to the [[link-chainstack]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-chainstack).\n */\nexport class ChainstackProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API key for the Chainstack connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Creates a new **ChainstackProvider**.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = ChainstackProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<ChainstackProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new ChainstackProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === getApiKey(this._network.name));\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%apiKey%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = getApiKey(network.name); }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === getApiKey(network.name)) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"ChainstackProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;AAaA,MAAAA,UAAA,GAAAC,OAAA;AAIA,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,qBAAA,GAAAH,OAAA;AAOA,SAASI,SAASA,CAACC,IAAY;EAC3B,QAAQA,IAAI;IACR,KAAK,SAAS;MAAE,OAAO,kCAAkC;IACzD,KAAK,UAAU;MAAE,OAAO,kCAAkC;IAC1D,KAAK,KAAK;MAAE,OAAO,kCAAkC;IACrD,KAAK,OAAO;MAAE,OAAO,kCAAkC;;EAG3D,IAAAN,UAAA,CAAAO,cAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAED,IAAI,CAAC;AACjE;AAEA,SAASE,OAAOA,CAACF,IAAY;EACzB,QAAOA,IAAI;IACP,KAAK,SAAS;MACV,OAAO,sCAAsC;IACjD,KAAK,UAAU;MACX,OAAO,sCAAsC;IACjD,KAAK,KAAK;MACN,OAAO,iCAAiC;IAC5C,KAAK,OAAO;MACR,OAAO,qCAAqC;;EAGpD,IAAAN,UAAA,CAAAO,cAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAED,IAAI,CAAC;AACjE;AAEA;;;;;;;;;AASA,MAAaG,kBAAmB,SAAQL,qBAAA,CAAAM,eAAe;EACnD;;;EAGSC,MAAM;EAEf;;;EAGAC,YAAYC,QAAqB,EAAEF,MAAsB;IACrD,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAMC,OAAO,GAAGX,YAAA,CAAAY,OAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;IAEtC,IAAIF,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGN,SAAS,CAACS,OAAO,CAACR,IAAI,CAAC;;IAEtD,MAAMW,OAAO,GAAGR,kBAAkB,CAACS,UAAU,CAACJ,OAAO,EAAEH,MAAM,CAAC;IAC9D,KAAK,CAACM,OAAO,EAAEH,OAAO,EAAE;MAAEK,aAAa,EAAEL;IAAO,CAAE,CAAC;IAEnD,IAAAd,UAAA,CAAAoB,gBAAgB,EAAqB,IAAI,EAAE;MAAET;IAAM,CAAE,CAAC;EAC1D;EAEAU,YAAYA,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIb,kBAAkB,CAACa,OAAO,EAAE,IAAI,CAACX,MAAM,CAAC;KACtD,CAAC,OAAOY,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEAE,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACb,MAAM,KAAKN,SAAS,CAAC,IAAI,CAACQ,QAAQ,CAACP,IAAI,CAAC;EACzD;EAEA;;;;EAIA,OAAOY,UAAUA,CAACJ,OAAgB,EAAEH,MAAsB;IACtD,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGN,SAAS,CAACS,OAAO,CAACR,IAAI,CAAC;;IAEtD,MAAMW,OAAO,GAAG,IAAIjB,UAAA,CAAAyB,YAAY,CAAC,YAAajB,OAAO,CAACM,OAAO,CAACR,IAAI,CAAE,IAAKK,MAAO,EAAE,CAAC;IACnFM,OAAO,CAACS,SAAS,GAAG,IAAI;IAExB,IAAIf,MAAM,KAAKN,SAAS,CAACS,OAAO,CAACR,IAAI,CAAC,EAAE;MACpCW,OAAO,CAACU,SAAS,GAAG,OAAOV,OAAO,EAAEW,QAAQ,EAAEC,OAAO,KAAI;QACrD,IAAA3B,cAAA,CAAA4B,mBAAmB,EAAC,oBAAoB,CAAC;QACzC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOb,OAAO;EAClB;;AAlDJc,OAAA,CAAAtB,kBAAA,GAAAA,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}